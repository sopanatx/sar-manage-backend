generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           String   @id @default(uuid())
  username     String   @unique
  password     String
  passwordSalt String
  email        String
  userLevel    String?
  fullname     String?
  refreshToken String?
  isDeleted    Boolean? @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

}

model PasswordReset {
  id                 String   @id @default(uuid())
  username           String
  resetPasswordToken String   @unique
  isValid            Boolean  @default(true)
  requested          DateTime @default(now())
  expired            DateTime @default(now())
}

model Semester {
  id             String           @unique @default(uuid())
  semesterName   String           @unique
  isAvailable    Boolean?         @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  // FileUploadData FileUploadData[]
  FileUploadData FileUploadData[]
}

model Category {
  id             Int              @unique @default(autoincrement())
  categoryName   String
  isAvailable    Boolean?         @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  SubCategory    SubCategory[]
  FileUploadData FileUploadData[]
}

model SubCategory {
  id                     Int              @unique @default(autoincrement())
  subCategoryName        String
  subCategoryDescription String
  isAvailable            Boolean?         @default(true)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @default(now())
  categories             Category         @relation(references: [id], fields: [categoryId])
  FileUploadData         FileUploadData[]
  categoryId             Int
  Topic                  Topic[]
}

model FileUploadData {
  id            String      @unique @default(uuid())
  index         String
  title         String?
  filename      String
  fileUrl       String
  shortenUrl    String?
  Semester      Semester    @relation(references: [id], fields: [semesterId])
  SubCategory   SubCategory @relation(references: [id], fields: [subCategoryId])
  Topic         Topic?      @relation(references: [id], fields: [TopicId])
  Category      Category    @relation(references: [id], fields: [categoryId])
  TopicId       Int?
  categoryId    Int
  semesterId    String
  subCategoryId Int
  authorId      String
  isDeleted     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  deletedAt     DateTime?
}

model NavigationMenu {
  id             Int        @unique @default(autoincrement())
  navigationName String?
  navigationUrl  String?
  assignedRole   UserLevel?
  isLocked       Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now())

  ChildrenNavigationMenu ChildrenNavigationMenu[]
}

model ChildrenNavigationMenu {
  id               Int            @unique @default(autoincrement())
  childrenName     String?
  childrenUrl      String?
  childrenDetails  String?
  assignedRole     UserLevel?
  isLocked         Boolean        @default(false)
  NavigationMenuId Int
  NavMenu          NavigationMenu @relation(references: [id], fields: [NavigationMenuId])

}

model Topic {
  id             Int              @unique @default(autoincrement())
  topicName      String?
  topicDetails   String?
  subCategoryId  Int
  subCategory    SubCategory      @relation(references: [id], fields: [subCategoryId])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  FileUploadData FileUploadData[]
  isDeleted      Boolean          @default(false)
}

enum UserLevel {
  ADMIN
  STUDENT
  TEACHER
}
